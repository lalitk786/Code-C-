#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// In a given matrix , calculate the min steps needed to reach to destination from source
/*
.  X   .
.  X   .
.  .   .

from (0,0) to (0,2) min steps is 6 
as (0,0)->(1,0)->(2,0)->(2,1)->(2,2)->(1,2)->(0,2) = 6 steps




*/
// Complete the minimumMoves function below.
bool isValid(vector<string> grid,int x,int y,int n){
    if(grid[x][y]=='X' || x>=n || y>=n || visited[x][y]==1 || x<0 || y<0)
        return false;
    return true;
}

int dx={-1, 0, 1, 0};
int dy={0, 1, 0, -1};

int minimumMoves(vector<string> grid, int startX, int startY, int goalX, int goalY) {
    
    int n=grid.size();

    bool **visited=new bool*[n];
    int ** dist = new int*[n];
    for(int i=0;i<n;i++){
        visited[i]=new bool[n];
        dist[i]=new int[n];
        for(int j=0;j<n;j++)
            visited[i][j]=false;
            dist[i][j]=0;
    }

    queue<pair<int,int>> q;
    q.push({startX,startY});
    visited[startX][startY]=true;
    dist[startX][startY]=0;

    while(!q.empty()){
        auto it=q.front();
        int curX=it->first;
        int curY=it->second;
        
        if(curX==goalX and curY==goalY){
            return dist[curX][curY];
        }

        q.pop();

        for(int i=0;i<3;i++){
            if(isValid(grid,curX+dx[i],curY+dy[i],n)){
                visited[curX+dx][curY+dy]=true;
                dist[curX+dx][curY+dy]=dist[curX][curY]+1;
                q.push({curX+dx,curY+dy});
            }
        }
    }


}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<string> grid(n);

    for (int i = 0; i < n; i++) {
        string grid_item;
        getline(cin, grid_item);

        grid[i] = grid_item;
    }

    string startXStartY_temp;
    getline(cin, startXStartY_temp);

    vector<string> startXStartY = split_string(startXStartY_temp);

    int startX = stoi(startXStartY[0]);

    int startY = stoi(startXStartY[1]);

    int goalX = stoi(startXStartY[2]);

    int goalY = stoi(startXStartY[3]);

    int result = minimumMoves(grid, startX, startY, goalX, goalY);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
